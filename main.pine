//@version=5
indicator("R Alert", overlay=true)

// Define the start and end dates for your desired date range in the format "YYYY-MM-DD"
startYear = input(2023, "Start Year")
startMonth = input(1, "Start Month")
startDay = input(1, "Start Day")

endYear = input(2024, "End Year")
endMonth = input(12, "End Month")
endDay = input(21, "End Day")

// Convert the start and end dates to Unix timestamp
startDate = timestamp(startYear, startMonth, startDay, 0, 0)
endDate = timestamp(endYear, endMonth, endDay, 0, 0)

// Calculate the current date in Unix timestamp
currentDate = timestamp(year, month, dayofmonth, 0, 0)

// Check if the current date is within the specified range
isWithinDateRange = currentDate >= startDate and currentDate <= endDate



// Function to check if a candle is red
isRed(i) =>    
    close[i] < open[i]

// Function to check if a candle is green
isGreen(i) =>
    close[i] > open[i]

rsiValue = 40//ta.rsi(close, 5)
smaValue2 =ta.ema(close,4000)
smaValue = ta.sma(close, 200)
// Variable to check if order is filled
var bool orderFilled = false
var float orderPrice = na
var float takeProfit = na
var float stopLoss = na
var float orderSize = na
var float orderPrice2 = na
var float takeProfit2 = na
var float stopLoss2 = na
var float orderSize2 = na
var float orderPrice3 = na
var float takeProfit3 = na
var float stopLoss3 = na
var float orderSize3 = na
var float orderSizeTotal = na
var bool orderCheck = false
var float lowestGreenLowSaved = na
var float redLowSaved = na
var float totalProfit = 0.
var float totalProfitTaken = 0.
var float orderDollar = 0.
var float averageDollar = 0.
var float fee = 0.
var float netProfit = 0.

// variable to format the timestamp
barTimeFormatted = str.format_time(time, "d-M-yy HH:mm", "UTC")

// Variables to manage order settings
var float maxProfit = 10000 //The max pending profit - adjust tp
var float maxProfitTrigger =  6000000000000000000
var float pendingProfitStopLimit2 = 50000 // second trailing tp - adjust sl
var float pendingProfitStopLimitTrigger2 = 1000000000000000
var float pendingProfitStopLimit = 10000 // first trailing tp - adjust slL
var float pendingProfitStopLimitTrigger = 50000000000000000
var float maxDrawDown = -100000000000000 // the max pending loss - adjust stop loss
var float maxDrawDownTrigger = -20000000000000
var float pendingProfitLimit = 1000000  // take sl to breakeven if a certain profit is reached
var float maxLoss = 1000. // Maximum loss allowed for each orderr
var float lossMultiplier = 10
var float profitMultiplier = 2  // Multiplier to calcculate take profitt
var int greenNum = 10
var float size1 = 0.2
var float size2 = 0.5
var float size3 = 0.3
var float profitMultiplier2 = 2
var float profitMultiplier3 = 2
var float maxPendingOrder = 2000000000
var float localMaxOrder = 70000000
var int totalOrders = 0 // Total number of filled orders
var int allowOrder = 50

// Array to store profit and stop loss for each filled order
var float[] profitUpdater = array.new_float()
var float[] profitUpdaterSaved = array.new_float()
var float[] lossSaved = array.new_float()
var float[] orderDollarList = array.new_float()
var float[] orderSizeList = array.new_float()
var string[] orderDate = array.new_string()
var string[] profitDate = array.new_string()
var string[] lossDate = array.new_string()

var float pendingProfit = 0.
var float pendingProfit2 = 0.

// if close[2] < smaValue2 and close[1] > smaValue2
//     allowOrder := 1
// if close[2] > smaValue2 and close[1] < smaValue2
//     allowOrder := 0

if isWithinDateRange

    // Check if any profit or stop loss has been reached
    if array.size(profitUpdater) > 0
        j = array.size(profitUpdater) - 4
        k = 0
        for i = 0 to j by 4
            // Check if the current high price is greater than or equal to profit price
            if high[1] >= array.get(profitUpdater, k)
                fee := fee + array.get(profitUpdater, k + 3) * array.get(profitUpdater, k) * 0.0004
                array.push(profitUpdaterSaved, totalProfit)
                // Update total profit and alert about reaching profit target
                //totalProfit := totalProfit + (profitMultiplier * maxLoss)
                //totalProfit := totalProfit + ((maxLoss/(array.get(profitUpdater, k+2)-array.get(profitUpdater, k+1))) * (array.get(profitUpdater, k)-array.get(profitUpdater, k+2)))
                totalProfit := totalProfit + (array.get(profitUpdater, k + 3) * (array.get(profitUpdater, k)-array.get(profitUpdater, k + 2)))
                array.push(profitUpdaterSaved, totalProfit)
                // array.push(profitUpdaterSaved, time)
                alert("Profit reached" + "Order Price: " + str.tostring(array.get(profitUpdater, k + 2)) + "Total profit: " + str.tostring(totalProfit))
                array.push(profitUpdaterSaved, array.get(profitUpdater, k))
                // Remove the profit price from the array
                array.remove(profitUpdater, k)
                array.push(profitUpdaterSaved, array.get(profitUpdater, k))
                // Also remove the corresponding stop loss from the array
                array.remove(profitUpdater, k)
                array.push(profitUpdaterSaved, array.get(profitUpdater, k))
                // Also remove the corresponding order price from the array
                array.remove(profitUpdater, k)
                array.push(profitUpdaterSaved, array.get(profitUpdater, k))
                // Also remove the corresponding order size from the array
                array.remove(profitUpdater, k)
                // Display the number of available orders after removing one
                alert("available orders: " + str.tostring(((array.size(profitUpdater) + 4)/4) - 1))
                // add the current date to profitDate list
                array.push(profitDate, barTimeFormatted)
            
                
            // Check if the current low price is less than or equal to stop loss
            else if low[1] <= array.get(profitUpdater, k + 1)
                fee := fee + array.get(profitUpdater, k + 3) * array.get(profitUpdater, k + 1) * 0.0004
                array.push(lossSaved, totalProfit)
                // Update total profit and alert about hitting stop loss
                //totalProfit := totalProfit - maxLoss
                //totalProfit := totalProfit - ((maxLoss/(array.get(profitUpdater, k+2)-array.get(profitUpdater, k+1))) * (array.get(profitUpdater, k+2)-array.get(profitUpdater, k+1)))
                totalProfit := totalProfit + (array.get(profitUpdater, k+3) * (array.get(profitUpdater, k + 1)-array.get(profitUpdater, k + 2)))
                array.push(lossSaved, totalProfit)
                alert("Stop loss hit" + "Order Price: " + str.tostring(array.get(profitUpdater, k + 2)) + "Total profit: " + str.tostring(totalProfit))
                //array.push(lossSaved, array.get(profitUpdater, k))
                // Remove the stop loss from the array
                array.remove(profitUpdater, k)
                //array.push(lossSaved, array.get(profitUpdater, k))
                // Also remove the corresponding profit price from the array
                array.remove(profitUpdater, k)
                //array.push(lossSaved, array.get(profitUpdater, k))
                // Also remove the corresponding order price from the array
                array.remove(profitUpdater, k)
                //array.push(lossSaved, array.get(profitUpdater, k))
                // Also remove the corresponding order size from the array
                array.remove(profitUpdater, k)
                // Display the number of available orders after removing one
                alert("available orders: " + str.tostring(((array.size(profitUpdater) + 4)/4) - 1))
                // add the current date to lossDate list
                array.push(lossDate, barTimeFormatted)
                
            else
                k := k + 4

    // Check if the order has been filled and update profitUpdater array
    if orderCheck
        if high[1] >= orderPrice
            fee := fee + orderSizeTotal * orderPrice * 0.0004
            allowOrder := allowOrder + 1
            //orderPrice := orderPrice + 0.1
            //stopLoss := stopLoss + 0.1
            //takeProfit := takeProfit + 0.1
            // Increment the total number of orders
            totalOrders := totalOrders + 1
            // Alert about the order being filled and update profitUpdater array
            alert("The order has been filled and profit and loss to the profit updater list, Total Orders: " + str.tostring(totalOrders))
            array.push(profitUpdater, takeProfit) // Add the order price to the profitUpdater array
            array.push(profitUpdater, stopLoss) // Add the stop loss to the profitUpdater array
            array.push(profitUpdater, orderPrice) // Add the order price to the profitUpdater array
            array.push(profitUpdater, orderSize) // Add the order size to the profitUpdater array
            array.push(profitUpdater, takeProfit2) // Add the order price to the profitUpdater array
            array.push(profitUpdater, stopLoss) // Add the stop loss to the profitUpdater array
            array.push(profitUpdater, orderPrice) // Add the order price to the profitUpdater array
            array.push(profitUpdater, orderSize2) // Add the order size to the profitUpdater array
            array.push(profitUpdater, takeProfit3) // Add the order price to the profitUpdater array
            array.push(profitUpdater, stopLoss) // Add the stop loss to the profitUpdater array
            array.push(profitUpdater, orderPrice) // Add the order price to the profitUpdater array
            array.push(profitUpdater, orderSize3) // Add the order size to the profitUpdater array
            orderCheck := false
            orderDollar := orderPrice * orderSizeTotal
            array.push(orderDollarList, orderDollar)
            array.push(orderSizeList, orderSizeTotal)
            // add current date to orderDate list
            array.push(orderDate, barTimeFormatted)

            // Check if the take profit or stop loss is hit by a single bar and update total profit
            // for take profit
            if high[1] >= takeProfit3
                //totalProfit := totalProfit + (profitMultiplier * maxLoss)
                totalProfit := totalProfit + (orderSize3 * (takeProfit3-orderPrice))
                // Alert about reaching take profit
                alert(" wow a single bar filled the order and hit take profit all at once!")
                // Remove the filled order from the array
                array.pop(profitUpdater)
                array.pop(profitUpdater)
                array.pop(profitUpdater)
                array.pop(profitUpdater)

                if high[1] >= takeProfit2
                    //totalProfit := totalProfit + (profitMultiplier * maxLoss)
                    totalProfit := totalProfit + (orderSize2 * (takeProfit2-orderPrice))
                    // Alert about reaching take profit
                    alert(" wow a single bar filled the order and hit take profit all at once!")
                    // Remove the filled order from the array
                    array.pop(profitUpdater)
                    array.pop(profitUpdater)
                    array.pop(profitUpdater)
                    array.pop(profitUpdater)

                    if high[1] >= takeProfit
                        //totalProfit := totalProfit + (profitMultiplier * maxLoss)
                        totalProfit := totalProfit + (orderSize * (takeProfit-orderPrice))
                        // Alert about reaching take profit
                        alert(" wow a single bar filled the order and hit take profit all at once!")
                        // Remove the filled order from the array
                        array.pop(profitUpdater)
                        array.pop(profitUpdater)
                        array.pop(profitUpdater)
                        array.pop(profitUpdater)


                // Display the number of available orders after removing one
                alert("available orders: " + str.tostring(((array.size(profitUpdater) + 4)/4) - 1))
                
                //add current date to profitDate
                array.push(profitDate, barTimeFormatted)

            // for stop loss
            else if low[1] <= stopLoss and isRed(1)
                //totalProfit := totalProfit - maxLoss
                totalProfit := totalProfit + (orderSizeTotal * (stopLoss-orderPrice))
                // Alert about hitting stop loss
                alert(" stoploss hit after filling the order by a single bar!")
                // Remove the filled order from the array
                for i = 0 to 11
                    array.pop(profitUpdater)
        
                // Display the number of available orders after removing one
                alert("available orders: " + str.tostring(((array.size(profitUpdater) + 4)/4) - 1))

                // add current date to lossDate list
                array.push(lossDate, barTimeFormatted)

    // Check if the current low is lower than the lowest green low and cancel the order
    if orderCheck
        if low[1] < lowestGreenLowSaved
            alert("Cancel order: low is lower than lowest green low")
            orderCheck := false

    // Check if a red candle cancelled the order and cancel the order
    if orderCheck
        if isRed(1) and isGreen(2)
            alert("Cancel order: A red candle cancelled the order")
            orderCheck := false

    // Check if a red candle is lower than the stop loss and modify the order
    if orderCheck
        if isRed(1) and isRed(2) and low[1] < redLowSaved
            alert("Modify the order by changing the stop loss, takeprofit and order size")
            stopLoss := orderPrice - ((orderPrice - low[1] ) * lossMultiplier)
            orderSizeTotal := maxLoss/(orderPrice - stopLoss)      
            orderSize := orderSizeTotal * size1
            orderSize2 := orderSizeTotal * size2
            orderSize3 := orderSizeTotal * size3
            // Calculate the take profit
            takeProfit := orderPrice + (profitMultiplier * (orderPrice - stopLoss))
            takeProfit2 := orderPrice + (profitMultiplier2 * (orderPrice - stopLoss))
            takeProfit3 := orderPrice + (profitMultiplier3 * (orderPrice - stopLoss))
            
    // Variables to track red candle data
    float redHigh = na
    float redLow = na

    // Variables to track green candle data
    float closestGreenHigh = na
    int lowestLowGreenIndex = na
    float lowestGreenLow = na

    // Check if the last candle is red
    lastCandleIsRed = isRed(1)

    // Initialize variables to count consecutive green candles
    countGreen = 0
    greenCandlesBeforeRed = 0

    // Count consecutive green candles before the last red candlee
    for i = 2 to 15
        if isGreen(i)
            countGreen := countGreen + 1
            if na(closestGreenHigh)
                closestGreenHigh := high[2] // This should be high[2], not high[i]
            
            if na(lowestGreenLow) or low[i] < lowestGreenLow
                lowestGreenLow := low[i]
                lowestLowGreenIndex := i
        else
            break

    // Check if there are at least one consecutive green candle before the reddd
    if lastCandleIsRed and low[1] > lowestGreenLow and countGreen >= greenNum and not orderCheck and array.size(profitUpdater) - 4 < maxPendingOrder and rsiValue < 50  and open < smaValue//  and open > smaValue2 //and smaValue > smaValue2// and rsiValue < 50 and open > smaValue and allowOrder > 0 and allowOrder < localMaxOrder // and close[1] > open[25] and close[26] > open[50]
        // Track the high and low of the red candle
        redHigh := high[1]
        redLow := low[1]
        
        // Calculate the order price (highest between the high of the red and the high of the closest green)
        orderPrice := redHigh > closestGreenHigh ? redHigh : closestGreenHigh

        // Save the lowest green low
        lowestGreenLowSaved := lowestGreenLow
        redLowSaved := redLow

        // Calculate the stop loss (low of the red candle)
        stopLoss := orderPrice - ((orderPrice - low[1] ) * lossMultiplier)
        orderSizeTotal := maxLoss/(orderPrice - stopLoss)      
        orderSize := orderSizeTotal * size1
        orderSize2 := orderSizeTotal * size2
        orderSize3 := orderSizeTotal * size3
        // Calculate the take profit
        takeProfit := orderPrice + (profitMultiplier * (orderPrice - stopLoss))
        takeProfit2 := orderPrice + (profitMultiplier2 * (orderPrice - stopLoss))
        takeProfit3 := orderPrice + (profitMultiplier3 * (orderPrice - stopLoss))

        // redLowSaved := stopLoss
        
        orderCheck := true
        // Prepare the alert message with the required values
        alertMessage = "There are " + str.tostring(countGreen) + " consecutive green candles before the red candle" + "\n" +
               "The high of the red candle: " + str.tostring(redHigh) + "\n" +
               "The low of the red candle: " + str.tostring(redLow) + "\n" +
               "The high of the closest green candle to the red candle: " + str.tostring(closestGreenHigh) + "\n" +
               "The lowest low of the green candles is " + str.tostring(lowestGreenLowSaved) + " which is the " + str.tostring(lowestLowGreenIndex - 1) + " green" + "\n" +
               "Order Price: " + str.tostring(orderPrice) + "\n" +
               "Stop Loss: " + str.tostring(stopLoss) + "\n" +
               "Take Profit: " + str.tostring(takeProfit)


        // Send the alert with the message containing the valuees
        alert(alertMessage)

    if lastCandleIsRed and countGreen < greenNum and not orderCheck
        alert("There are no green candles before the red candle")

    pendingProfit := 0 
    pendingProfit2 := 0
    if array.size(profitUpdater) > 0
        for i = 0 to array.size(profitUpdater) - 4 by 4
            // Check if the current high price is greater than or equal to profit price
            pendingProfit := pendingProfit + (array.get(profitUpdater, i+3) * (low[1] - array.get(profitUpdater, i+2)))
            pendingProfit2 := pendingProfit2 + (array.get(profitUpdater, i+3) * (high[1] - array.get(profitUpdater, i+2)))


    float averagePosition = 0
    float totalSize = 0
    if array.size(profitUpdater) > 0
        for i = 0 to array.size(profitUpdater) - 4 by 4
            averagePosition := (array.get(profitUpdater, i + 2) * array.get(profitUpdater, i + 3) + averagePosition * totalSize) / (totalSize + array.get(profitUpdater, i + 3)) 
            totalSize := totalSize + array.get(profitUpdater, i + 3)


    // // ADJUSTING TPS

    maxProfitPrice = averagePosition + maxProfit/totalSize
    if pendingProfit2 > maxProfitTrigger and open < maxProfitPrice
        for i = 0 to array.size(profitUpdater) - 4 by 4
            if array.get(profitUpdater, i) > maxProfitPrice
                array.set(profitUpdater, i, maxProfitPrice)


    // ADJUSTING SLS

    //ensure loss is - 500
    maxDrawDownPrice = averagePosition + maxDrawDown/totalSize
    if array.size(profitUpdater) != 0
        for i = 0 to array.size(profitUpdater) - 4 by 4
            if open > maxDrawDownPrice
                if array.get(profitUpdater, i + 1) < maxDrawDownPrice
                    array.set(profitUpdater, i + 1, maxDrawDownPrice)


    // takes to break even if pendingProfitLimit is reached            
    if pendingProfit2 > pendingProfitLimit and open > averagePosition
        for i = 0 to array.size(profitUpdater) - 4 by 4
            array.set(profitUpdater, i + 1, averagePosition)



    // put a stop loss when profit hits the trigger to lock profit inN

    pendingProfitStopLimitPrice =  averagePosition + (pendingProfitStopLimit / totalSize)

    if pendingProfit2 > pendingProfitStopLimitTrigger and open > pendingProfitStopLimitPrice
        for i = 0 to array.size(profitUpdater) - 4 by 4
            array.set(profitUpdater, i + 1, pendingProfitStopLimitPrice)


    pendingProfitStopLimitPrice2 =  averagePosition + (pendingProfitStopLimit2 / totalSize)

    if pendingProfit2 > pendingProfitStopLimitTrigger2 and open > pendingProfitStopLimitPrice2
        for i = 0 to array.size(profitUpdater) - 4 by 4
            array.set(profitUpdater, i + 1, pendingProfitStopLimitPrice2)

    // fee := array.sum(orderDollarList) * 0.0004
    totalProfitTaken := totalProfit - fee
    netProfit := totalProfitTaken + pendingProfit
    averageDollar := array.sum(orderDollarList)/totalOrders

//alert( "Total Orders: " + str.tostring(totalOrders)  + "\n" + "  pending orders: " + str.tostring(((array.size(profitUpdater) + 4)/4) - 1) + "    " + str.tostring(profitUpdater) )
///alert("profit list: " + str.tostring(profitUpdaterSaved))
//alert("loss list: " + str.tostring(lossSaved))
//alert("order dollar list: " + str.tostring(orderDollarList))

//alert("average dollar: " + str.tostring(averageDollar))
//alert("order size list: " + str.tostring(orderSizeList))
alert(barTimeFormatted)
//alert("Total profit: " + str.tostring(totalProfitTaken) + "average dollar: "+ str.tostring(averageDollar) + "\n" + "net profit: " + str.tostring(netProfit))
//alert("pendingProfit: " + str.tostring(pendingProfit) + "Total Orders: " + str.tostring(totalOrders))
//alert("Total profit: " + str.tostring(totalProfitTaken) + "pendingProfit: " + str.tostring(pendingProfit))
//alert("pending orders list: " + str.tostring(profitUpdater))
alert("Total profit: " + str.tostring(totalProfitTaken))
alert("net profit: " + str.tostring(netProfit))
alert( "Total Orders: " + str.tostring(totalOrders))
alert("order dates: " + str.tostring(orderDate))
alert("profit dates: " + str.tostring(profitDate))
alert("loss dates: " + str.tostring(lossDate))
//alert("pendingProfit: " + str.tostring(pendingProfit))
//alert("Feeless profit: " + str.tostring(totalProfit))
//alert( "Total Orders: " + str.tostring(totalOrders))
//alert("profit: " + str.tostring(totalProfitTaken))